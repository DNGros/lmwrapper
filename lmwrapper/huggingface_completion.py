import logging
from dataclasses import asdict, dataclass

import openai


@dataclass
class Completion:
    model: str
    """
    ID of the model to use. You can use the List models API to see all of your available models, or see our Model overview for descriptions of them.
    """
    prompt: str | list[str]
    """
    The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.

    Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model
    will generate as if from the beginning of a new document.
    """

    best_of: int | None = 1
    """
    Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
    When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.
    Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable
    settings for max_tokens and stop.
    """

    echo: bool | None = False
    """Echo back the prompt in addition to the completion"""

    frequency_penalty: float | None = 0.0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the
    model's likelihood to repeat the same line verbatim.
    """

    logit_bias: dict[str, float] | None = None
    """
    Modify the likelihood of specified tokens appearing in the completion.
    Accepts a dictionary that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100.
    You can use the tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to
    the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or
    increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.

    As an example, you can pass {"50256": -100} to prevent the <|endoftext|> token from being generated.
    """

    logprobs: int | None = None
    """
    Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will
    return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1
    elements in the response.

    The maximum value for logprobs is 5.
    """

    max_tokens: int | None = 16
    """
    The maximum number of tokens to generate in the completion.

    The token count of your prompt plus max_tokens cannot exceed the model's context length.
    """

    n: int | None = 1
    """
    How many completions to generate for each prompt.

    Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have
    reasonable settings for max_tokens and stop.
    """

    presence_penalty: float | None = 0.0
    """
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's
    likelihood to talk about new topics.
    """

    stop: str | list[str] | None = None
    """Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence."""

    stream: bool | None = False
    """
    Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream
    terminated by a data: [DONE] message.
    """

    suffix: str | None = None
    """The suffix that comes after a completion of inserted text."""

    temperature: float | None = 1.0
    """
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will
    make it more focused and deterministic. We generally recommend altering this or top_p but not both.
    """

    top_p: float | None = 1.0
    """
    An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
    So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.
    """

    user: str | None = None
    """A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more."""

    def __post_init__(self):
        if not isinstance(self.model, str):
            msg = "Model parameter must be a string."
            raise ValueError(msg)

        if not isinstance(self.prompt, str) or (
            isinstance(self.prompt, list)
            and not all(isinstance(p, str) for p in self.prompt)
        ):
            msg = "Prompt parameter must be a string or list of strings."
            raise ValueError(msg)

        if self.best_of is not None and not isinstance(self.best_of, int):
            msg = "Best_of parameter must be an integer."
            raise ValueError(msg)

        if self.echo is not None and not isinstance(self.echo, bool):
            msg = "Echo parameter must be a boolean."
            raise ValueError(msg)

        if self.frequency_penalty is not None and not isinstance(
            self.frequency_penalty,
            float,
        ):
            msg = "Frequency_penalty parameter must be a float."
            raise ValueError(msg)

        if (
            self.logit_bias is not None
            and not isinstance(self.logit_bias, dict)
            or (
                isinstance(self.logit_bias, dict)
                and not all(
                    isinstance(k, str) and isinstance(v, float)
                    for k, v in self.logit_bias.items()
                )
            )
        ):
            msg = "Logit_bias parameter must be a dictionary of str to float."
            raise ValueError(msg)

        if self.logprobs is not None and not isinstance(self.logprobs, int):
            msg = "Logprobs parameter must be an integer."
            raise ValueError(msg)

        if self.max_tokens is not None and not isinstance(self.max_tokens, int):
            msg = "Max_tokens parameter must be an integer."
            raise ValueError(msg)

        if self.n is not None and not isinstance(self.n, int):
            msg = "N parameter must be an integer."
            raise ValueError(msg)

        if self.presence_penalty is not None and not isinstance(
            self.presence_penalty,
            float,
        ):
            msg = "Presence_penalty parameter must be an integer."
            raise ValueError(msg)

        if (
            self.stop is not None
            and not isinstance(self.stop, str)
            or (
                isinstance(self.stop, list)
                and not all(isinstance(s, str) for s in self.stop)
            )
        ):
            msg = "Stop parameter must be a string or a list of strings."
            raise ValueError(msg)

        if self.stream is not None and not isinstance(self.stream, bool):
            msg = "Stream parameter must be a boolean."
            raise ValueError(msg)

        if self.suffix is not None and not isinstance(self.suffix, str):
            msg = "Suffix parameter must be a string."
            raise ValueError(msg)

        if self.temperature is not None and not isinstance(self.n, float):
            msg = "Temperature parameter must be a float."
            raise ValueError(msg)

        if self.top_p is not None and not isinstance(self.top_p, float):
            msg = "Top_p parameter must be a float."
            raise ValueError(msg)

        if self.n is not None and not isinstance(self.n, str):
            msg = "User parameter must be a string."
            raise ValueError(msg)

        if self.temperature != 1.0 and self.top_p != 1.0:
            logging.warning(
                "Both temperature and top_p modified. This is not recommended.",
            )

    def to_openai_completion(self) -> openai.Completion:
        return openai.Completion.create(**asdict(self))
